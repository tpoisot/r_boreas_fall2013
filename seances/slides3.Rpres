Stratégies pour l'analyse de données
=======
author: Timothée Poisot

Dans la dernière séance
=======

- Ne pas utiliser de boucles `for`
- Utiliser les raccourcis le plus possible

Objectifs de la séance
=======

1. Concevoir une stratégie d'analyse de données
2. `split`-`apply`-`combine`
3. Les *packages* `plyr` et `reshape`
4. Les graphiques avec `ggplot2`

Les données "complexes"
=====

1. De grande taille (*relativement aux statistiques classiques*)
2. Multi-factorielles
3. Incomplètes

Fonctions de base dans R
=====

- `lapply`, `tapply`, `aggregate`, `sapply`, ...
- **Problème**: Pas de consistence dans
   1. les noms
   2. le comportement
   3. les entrées / sorties

Un exemple
=======

- 147 individus de différentes espèces de parasites de poissons, sur différents hôtes
- une dizaine de mesures morphométriques
- certaines données sont manquantes
- toutes les combinaisons de facteurs n'ont pas le même nombre d'observations

Pour récupérer les données: `http://dx.doi.org/10.6084/m9.figshare.97320`

La question
======

1. La morphologie des différentes espèces est-elle la même?
2. La morphologie d'une même espèce sur ses différents hôtes?

Pour la réponse: Timothée Poisot, Yves Desdevises (2010) Putative speciation
events in *Lamellodiscus* (Monogenea: Diplectanidae) assessed by a morphometric
approach. *Biological Journal of the Linnean Society* 99 (3) 559-569.

Lecture des données
======

```{r}
lam = read.table('http://files.figshare.com/143154/lamellodiscus.txt',sep='\t',h=TRUE,dec='.')
head(lam)
```

Préparer les données
=====

```{r}
library(reshape2)
lam = melt(lam, na.rm=TRUE)
head(lam)
```

Taille d'échantillon
=====

```{r}
acast(lam, sppar ~ sphote ~ variable, length)
```

Limitation
=====

> If the combination of variables you supply does not uniquely identify one row in the original data set, you will need to supply an aggregating function, fun.aggregate. This function should take a vector of numbers and return a single summary statistic.

**Solution**: la librairie `plyr`

Stratégie d'analyse
=====

1. `split`: diviser les données en ensembles (*pieces*) sur lesquels on travaille
2. `apply`: appliquer la fonction de traitement à chaque *piece*
3. `combine`: "re-coller" les objets dans un objet final

Une adresse: [http://plyr.had.co.nz/](http://plyr.had.co.nz/)

Fonction de traitement
=====

1. Prend une *piece* comme argument
2. Applique la mesure, statistique, *etc*.
3. Renvoie un objet (idéalement) de la même nature que la *piece*

**Important:** La fonction de traitement doit *toujours* renvoyer un objet du même type (rappel séance 1: prédictibilité)

plyr
======

Nommage des fonctions de `plyr`: `**ply()`

- `d`: `data.frame`
- `a`: `array` (vecteur)
- `l`: `list`
- `_`: *discard* (only for the second letter)

**Exemple:** `dlply` prend un `data.frame` en entrée, renvoie une `list`

plyr
======

```{r}
library(plyr)
head(ddply(lam, sphote~sppar~variable, function(x) mean(x$value)))
```

Une note importante
======

Les `data.frame` sont des `list` d'`array`. On peut donc les utiliser dans `l*ply()`.

Les `data.frame` sont des `array` a deux dimensions. On peut donc les utiliser dans `a*ply()`.

Procédure
======

1. Définir le type entrée/sortie
2. Définir la fonction de traitement
3. Appeller la fonction `**ply` qui correspond

Exemple
=====

On a des données spatiales hétérogènes

```{r}
n = 100
x = round(runif(4),1)
y = round(runif(4),1)
pop = data.frame(
   X = sample(x, n, replace=T),
   Y = sample(y, n, replace=T),
   N = rlnorm(n, 2.0)
)
```

On veut standardiser (`scale`) les données *par site*, pour avoir des données de moyenne 0, d'écart-type 1.

Approche R "classique"
======

```{r}
head(aggregate(pop$N, list(X=pop$X, Y=pop$Y), scale))
```

Approche plyr - scale
======

```{r}
head(ddply(pop, .(X, Y), function(df) scale(df$N)))
```

Approche plyr - nombre d'échantillons
======

```{r}
out = ddply(pop, .(X, Y), function(df) length(df$N))
head(out)
```

Approche plyr - syntaxe simplifiée
======

```{r}
out = ddply(pop, Y~X, nrow)
head(out)
```

Approche plyr - vers une matrice
======

```{r}
out = daply(pop, Y~X, nrow)
out
```

Approche plyr - vers une liste
======

```{r}
out = dlply(pop, Y~X, nrow)
head(out)
```

Retour aux données
======

```{r}
all_means = ddply(lam, sphote ~ sppar ~ variable, summarize, mean = mean(value), sd = sd(value), n = length(value))
head(all_means)
```

La foncton summarize
=====

La fonction `summarize` permet de résumer et de donner des noms aux statistiques:

```
summarize, mean_X = mean(X), mean_Y = mean(Y), sample_X = nrow(X)
```

Utilisation de subset
=====

```{r}
all_eleg = ddply(subset(lam, sppar=='eleg'), sphote ~ variable, summarize, mean = round(mean(value), 2), sd = round(sd(value), 2), n = length(value))
head(all_eleg)
```
Remettre les données en forme
=====

```{r}
dcast(all_eleg, sphote ~ variable, value.var = "mean")
```
Synthèse
=====

1. Lire les données
2. Les mettre en forme avec `reshape2`
3. Les traiter avec `plyr`
4. Éventuellement, les formatter avec `reshape2`

Visualisation
=====

La librairie `ggplot2` permet de visualiser facilement des `data.frame` (au format retourné par `melt`)

```{r}
library(ggplot2)
```

Principe de ggplot2
=====

*Grammaire graphique*

1. Données
2. Esthétiques
3. Visualisation

**Étape obligée:** [http://docs.ggplot2.org/current/](http://docs.ggplot2.org/current/)

Exemple
=====

```{r}
ggplot(subset(lam, lam$sppar=='eleg'), aes(x=variable, y=value, fill=sphote)) + geom_boxplot()
```

Exemple
=====

```{r}
ggplot(droplevels(subset(lam, lam$variable=='a')), aes(x=value, fill=sphote)) + geom_density(alpha=0.5) + facet_wrap(~sppar)
```

Exemple
=====

```{r}
wvar = dcast(lam, sppar * sphote * para ~ variable, value.var = c("value"), mean)
ggplot(wvar, aes(x=a, y=d, colour=sppar)) + geom_point() + facet_wrap(~sphote)
```
